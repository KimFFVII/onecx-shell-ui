---
openapi: 3.0.3
info:
  title: Generated API
  version: '1.0'

paths:
  /workspaceConfig:
    get:
      tags:
        - "WorkspaceConfig"
      parameters:
        - name: 'url'
          in: 'query'
          required: true
          schema:
            type: 'string'
      operationId: getWorkspaceConfig
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkspaceConfigResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        '404':
          description: 'Not Found'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'

  /userProfile:
    get:
      tags:
        - "user"
      parameters:
        - name: 'url'
          in: 'query'
          required: true
          schema:
            type: 'string'
      operationId: getUserProfile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserProfileResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        '404':
          description: 'Not Found'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'

  /permissions:
    get:
      tags:
        - "user"
      parameters:
        - name: 'appId'
          in: 'query'
          required: true
          schema:
            type: 'string'
        - name: 'productName'
          in: 'query'
          required: true
          schema:
            type: 'string'
      operationId: getPermissions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPermissionsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        '404':
          description: 'Not Found'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'

components:
  schemas:
    GetWorkspaceConfigResponse:
      type: object
      required:
        - 'routes'
        - 'theme'
        - 'workspace'
        - 'remoteComponents'
        - 'shellRemoteComponents'
      properties:
        routes:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/AngularRoute'
              - $ref: '#/components/schemas/WebComponentRoute'
        theme:
          $ref: '#/components/schemas/Theme'
        workspace:
          $ref: '#/components/schemas/Workspace'
        remoteComponents:
          type: array
          items:
            $ref: '#/components/schemas/RemoteComponent'
        shellRemoteComponents:
          type: array
          items:
            $ref: '#/components/schemas/RemoteComponentMapping'
          
    Workspace:
      type: object
      properties:
        portalName:
          type: string
        baseUrl:
          type: string
          
    Theme:
      type: object
      properties:
        name:
          type: string
        properties:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string

    Route:
      type: object
      required:
        - 'url'
        - 'baseUrl'
        - 'remoteEntryUrl'
        - 'type'
        - 'exposedModule'
        - 'appId'
        - 'productName'
        - 'bffUrl'
        - 'pathMatch'
      properties:
        url:
          type: string
        baseUrl:
          type: string
        remoteEntryUrl:
          type: string
        appId:
          type: string
        productName:
          type: string
        bffUrl:
          type: string
        type:
          type: string
          enum:
            - WebComponent
            - Angular
        exposedModule:
          type: string
        pathMatch:
          $ref: '#/components/schemas/PathMatch'
          
    PathMatch:
      type: string
      enum: ['full', 'prefix']
          
    AngularRoute:
      type: object
      allOf:
        - $ref: '#/components/schemas/Route'
        
    WebComponentRoute:
      type: object
      allOf:
        - $ref: '#/components/schemas/Route'
      required:
        - 'productName'
      properties:
        productName:
          type: string

    RemoteComponent:
      type: object
      required:
        - 'name'
        - 'url'
        - 'baseUrl'
        - 'remoteEntryUrl'
        - 'exposedModule'
        - 'appId'
        - 'productName'
        - 'bffUrl'
      properties:
        name:
          type: string
        baseUrl:
          type: string
        remoteEntryUrl:
          type: string
        appId:
          type: string
        productName:
          type: string
        bffUrl:
          type: string
        exposedModule:
          type: string

    RemoteComponentMapping:
      type: object
      required:
        - 'slotName'
        - 'remoteComponent'
      properties:
        slotName:
          type: string
        remoteComponent:
          type: string
          
    GetUserProfileResponse:
      type: object
      required:
        - 'userProfile'
      properties:
        userProfile:
          $ref: '#/components/schemas/UserProfile'
          
    UserProfile:
      type: object
      required:
        - 'userId'
        - 'person'
      properties:
        userId:
          type: string
        person:
          $ref: '#/components/schemas/UserPerson'
        accountSettings:
          $ref: '#/components/schemas/AccountSettings'
          
    UserPerson:
      type: object
      properties:
        firstName:
          type: string
        lastName: 
          type: string
        displayName:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/UserPersonAddress'
        phone:
          $ref: '#/components/schemas/UserPersonPhone'
          
    UserPersonAddress:
      type: object
      properties:
        street:
          type: string
        streetNo:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
    
    UserPersonPhone:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PhoneType'
        number:
          type: string
          
    PhoneType:
      type: string
      enum: ['MOBILE', 'LANDLINE']

    AccountSettings:
      type: object
      properties:
        layoutAndThemeSettings:
          $ref: '#/components/schemas/LayoutAndThemeSettings'
        localeAndTimeSettings:
          $ref: '#/components/schemas/LocaleAndTimeSettings'
    
    LayoutAndThemeSettings:
      type: object
      properties:
        colorScheme:
          $ref: '#/components/schemas/ColorScheme'
        menuMode:
          $ref: '#/components/schemas/MenuMode'
          
    ColorScheme:
      type: string
      enum: ['AUTO', 'LIGHT', 'DARK']
      
    MenuMode:
      type: string
      enum: ['HORIZONTAL', 'STATIC', 'OVERLAY', 'SLIM', 'SLIMPLUS']
              
    LocaleAndTimeSettings:
      type: object
      properties:
        locale:
          type: string
        timeZone:
          type: string

    GetPermissionsResponse:
      type: object
      required:
        - permissions
      properties:
        permissions:
          type: array
          items:
            type: string
    
    ProblemDetailResponse:
      type: object
      properties:
        errorCode:
          type: string
        detail:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailParam'
        invalidParams:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailInvalidParam'

    ProblemDetailParam:
      type: object
      properties:
        key:
          type: string
        value:
          type: string

    ProblemDetailInvalidParam:
      type: object
      properties:
        name:
          type: string
        message:
          type: string